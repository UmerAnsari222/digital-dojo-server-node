generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String?
  email       String       @unique
  password    String
  imageUrl    String?
  fcmToken    String?
  providerId  String?      @unique
  provider    Provider     @default(EMAIL)
  role        Role         @default(USER)
  habits      Habit[]
  userHabits  UserHabit[]
  completions Completion[]

  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  WeeklyChallengeCompletion WeeklyChallengeCompletion[]
  UserDailyChallenge        UserDailyChallenge[]
}

model Habit {
  id         String @id @default(uuid())
  title      String
  daysOfWeek Int[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  userHabits UserHabit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserHabit {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  habitId String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)

  completions Completion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Completion {
  id   String   @id @default(uuid())
  date DateTime
  day  Int

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  userHabitId String?
  userHabit   UserHabit? @relation(fields: [userHabitId], references: [id], onDelete: SetNull)

  userChallengeId String?
  userChallenge   DailyChallenge? @relation(fields: [userChallengeId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Challenge {
  id    String  @id @default(uuid())
  title String?

  challengeType ChallengeType   @default(DAILY)
  status        ChallengeStatus @default(DRAFT)
  startDate     DateTime?

  weeklyChallenges           WeeklyChallenge[]
  weeklyChallengeCompletions WeeklyChallengeCompletion[]
  dailyChallenges            DailyChallenge[]
  // userDailyChallenge         UserDailyChallenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DailyChallenge {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  challengeId String?
  challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  startTime DateTime? @db.Time
  endTime   DateTime? @db.Time

  userDailyChallenges UserDailyChallenge[]
  completions         Completion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDailyChallenge {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  completed Boolean  @default(false)
  skip      Boolean  @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  dailyChallengeId String?
  dailyChallenge   DailyChallenge? @relation(fields: [dailyChallengeId], references: [id], onDelete: SetNull)

  // challengeId String?
  // challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WeeklyChallenge {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  dayOfWeek   Int // 0 = Sunday, 1 = Monday, ... 6 = Saturday

  startTime DateTime? @db.Time
  endTime   DateTime? @db.Time

  isChallengeUpdate Boolean @default(false)

  challengeType ChallengeType @default(WEEKLY)

  challengeId String?
  challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: SetNull)
  categoryId  String?
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  weeklyChallengeCompletions WeeklyChallengeCompletion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WeeklyChallengeCompletion {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  challengeId String?
  // challenge   WeeklyChallenge? @relation(fields: [challengeId], references: [id], onDelete: SetNull)
  challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: SetNull)

  weeklyChallengeId String?
  weeklyChallenge   WeeklyChallenge? @relation(fields: [weeklyChallengeId], references: [id], onDelete: SetNull)

  date DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String @id @default(uuid())
  title    String
  imageUrl String

  habits           Habit[]
  weeklyChallenges WeeklyChallenge[]
  dailyChallenges  DailyChallenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  APPLE
  GOOGLE
  EMAIL
}

enum ChallengeType {
  WEEKLY
  DAILY
}

enum ChallengeStatus {
  DRAFT
  SCHEDULE
  RUNNING
  COMPLETED
}
